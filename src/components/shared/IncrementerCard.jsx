// src/components/shared/IncrementerCard.jsx
import React from "react";
import Tooltip from "./Tooltip";
import "./incrementer.css";

// Props:
// - incrementer: { id, name, description, owned, cost, baseProduction (new), ... }
// - onIncrement: function(incrementer, index)
// - index: number
// - actualPerUnitOutput: (Number) The true current output per single unit of this incrementer, after all upgrades.
// - totalOutput: (Number) The true total current output for all owned units of this incrementer.
// - tooltipDetails: (ReactNode) Detailed breakdown for the tooltip, provided by LinearGame.

const IncrementerCard = ({
  incrementer,
  onIncrement,
  index,
  actualPerUnitOutput, // Calculated by LinearGame and passed as prop
  totalOutput,         // Calculated by LinearGame and passed as prop
  tooltipDetails,      // Generated by LinearGame and passed as prop
}) => {
  const owned = incrementer.owned || 0;
  // Cost calculation logic might remain similar or be simplified if baseCost is consistent
  const cost = incrementer.id === "tier1"
      ? Math.floor(1 * Math.pow(1.2, owned)) // Example, ensure consistency
      : incrementer.cost;

  // actualPerUnitOutput is now directly provided
  // TEST: IncrementerCard displays actualPerUnitOutput correctly.

  return (
    <div className="tier-container dashboard">
      <Tooltip content={tooltipDetails}>
        <div
          className="incrementer"
          onClick={() => onIncrement && onIncrement(incrementer, index)}
        >
          <div className="incrementer-header">
            <h3>{incrementer.name}</h3>
            <p className="incrementer-desc">{incrementer.description}</p>
          </div>
          <div className="incrementer-stats">
            <div className="stat-row">
              <span className="stat-label">Owned:</span>
              <span className="stat-value">{owned}</span>
            </div>
            <div className="stat-row">
              <span className="stat-label">Per-1 Output:</span>
              <span className="stat-value highlight">
                {(actualPerUnitOutput ?? 0).toFixed(1)}/tick {/* Use toFixed for display */}
              </span>
            </div>
            <div className="stat-row">
              <span className="stat-label">Total Output:</span>
              <span className="stat-value">
                {(totalOutput ?? 0).toFixed(1)}/tick
              </span>
            </div>
            <div className="stat-row">
              <span className="stat-label">Cost:</span>
              <span className="stat-value cost">{cost}</span>
            </div>
            {/* TEST: IncrementerCard displays totalOutput correctly. */}
          </div>
        </div>
      </Tooltip>
    </div>
  );
};

export default IncrementerCard;